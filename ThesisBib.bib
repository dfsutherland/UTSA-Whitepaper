% This file was created with JabRef 2.8.1.
% Encoding: UTF8

@ARTICLE{Abadi2006,
  author = {Abadi, Martin and Flanagan, Cormac and Freund, Stephen N.},
  title = {Types for Safe Locking: Static Race Detection for Java},
  journal = {ACM Trans. Program. Lang. Syst.},
  year = {2006},
  volume = {28},
  pages = {207--255},
  number = {2},
  month = mar,
  acmid = {1119480},
  address = {New York, NY, USA},
  doi = {10.1145/1119479.1119480},
  issn = {0164-0925},
  issue_date = {March 2006},
  keywords = {Concurrent programs, race conditions, type inference, type system},
  numpages = {49},
  owner = {dfsuther},
  publisher = {ACM},
  timestamp = {2014.01.22},
  url = {http://doi.acm.org/10.1145/1119479.1119480}
}

@MISC{Gnat1995,
  author = {{Adacore Inc.}},
  title = {Gnu Ada Translator (GNAT)},
  note = {Ada compiler fully integrated with gcc.},
  owner = {dfsuther},
  timestamp = {2008.04.01},
  url = {http://www.gnu.org/software/gnat/gnat.html}
}

@INPROCEEDINGS{Agarwal2004,
  author = {R. Agarwal and S. D. Stoller},
  title = {Type inference for parameterized race-free {J}ava},
  booktitle = {Proc. Conference on Verification, Model Checking and Abstract Interpretation},
  year = {2004},
  pages = {149--160},
  owner = {dfsuther},
  timestamp = {2008.04.18}
}

@PHDTHESIS{Aldrich2003,
  author = {J. Aldrich},
  title = {Using Types to Enforce Architectural Structure},
  school = {University of Washington},
  year = {2003},
  month = {August},
  file = {Aldrich Thesis:/Users/dfsuther/Documents/School/Thesis/Papers of Others/aldrich-dissertation.pdf:PDF},
  owner = {dfsuther},
  text = {J. Aldrich. Using Types to Enforce Architectural Structure. PhD thesis,
	University of Washington, August 2003.},
  timestamp = {2008.01.30},
  url = {citeseer.ist.psu.edu/aldrich03using.html}
}

@INPROCEEDINGS{Aldrich2004,
  author = {Jonathan Aldrich and Craig Chambers},
  title = {Ownership {D}omains: {S}eparating {A}liasing {P}olicy from {M}echanism},
  booktitle = {ECOOP},
  year = {2004},
  pages = {1--25},
  abstract = {Ownership types promise to provide a practical mechanism for enforcing
	stronger encapsulation by controlling aliasing in object-oriented
	languages. However, previous ownership type proposals have tied the
	aliasing policy of a system to the mechanism of ownership. As a result,
	these proposals are too weak to express many important aliasing constraints,
	yet also so restrictive that they prohibit many useful programming
	idioms.
	
	In this paper, we propose ownership domains, which decouple encapsulation
	policy from the mechanism of ownership in two key ways. First, developers
	can specify multiple ownership domains for each object, permitting
	a fine-grained control of aliasing compared to systems that provide
	only one ownership domain for each object. Second, developers can
	specify the permitted aliasing between each pair of domains in the
	system, providing more flexibility compared to systems that enforce
	a fixed policy for inter-domain aliasing. Because it decouples policy
	from mechanism, our alias control system is both more precise and
	more flexible than previous ownership type systems.},
  file = {:Users/dfsuther/Documents/School/Thesis/Papers of Others/Aldrichecoop04.pdf:PDF},
  keywords = {Encapsulation},
  owner = {dfsuther},
  timestamp = {2009.07.03}
}

@INPROCEEDINGS{Aldrich2002,
  author = {Jonathan Aldrich and Craig Chambers and David Notkin},
  title = {Architectural Reasoning in {ArchJava}},
  booktitle = {ECOOP},
  year = {2002},
  pages = {334--367},
  address = {London, UK},
  publisher = {Springer-Verlag},
  owner = {dfsuther},
  timestamp = {2008.01.30}
}

@ARTICLE{Allen2001,
  author = {Allen, E.B.; Khoshgoftaar, T.M.; Chen, Y.},
  title = {Measuring coupling and cohesion of software modules: an information-theory
	approach},
  journal = {Software Metrics Symposium, 2001. METRICS 2001. Proceedings. Seventh
	International},
  year = {2001},
  pages = {124-134},
  abstract = {Coupling of a subsystem characterizes its interdependence with other
	subsystems. A subsystem's cohesion, on the other hand, characterizes
	its internal interdependencies. When used in conjunction with other
	attributes, measurements of a subsystem's coupling and cohesion can
	contribute to software quality models. An abstraction of a software
	system can be represented by a graph, and a module (subsystem) by
	a subgraph. Software design graphs depict components and their relationships.
	E.B. Allen and T.M. Khoshgoftaar (1999) proposed information theory-based
	measures of coupling and cohesion of a modular system. This paper
	proposes related information theory-based measures of coupling and
	cohesion of a module. These measures have the properties of module-level
	coupling and cohesion defined by Briand, Morasca and Basili (1997,
	1999) . We define cohesion of a module in terms of intra-module coupling,
	normalized to between zero and one. We illustrate the measures with
	example graphs and an empirical analysis of the call graph of a moderate-sized
	C program, the Nethack computer game. Preliminary analysis showed
	that the information-theory approach has finer discrimination than
	counting},
  file = {CouplingCohesionInfTheory.pdf:/Users/dfsuther/Documents/School/Thesis/Papers of Others/CouplingCohesionInfTheory.pdf:PDF},
  keywords = {computer games, graph theory, information theory, software metrics,
	software quality, subroutinesC program, Nethack computer game, call
	graph, counting, discrimination, excess entropy, information theory,
	internal interdependencies, intra-module coupling, software components,
	software design graphs, software metrics, software module cohesion,
	software module coupling, software quality models, subgraph, subsystem
	interdependence},
  owner = {dfsuther},
  timestamp = {2008.01.29}
}

@ARTICLE{Artho2001,
  author = {Artho, C. and Biere, A.},
  title = {Applying static analysis to large-scale, multi-threaded {Java} programs},
  journal = {Software Engineering Conference, 2001. Proceedings. 2001 Australian},
  year = {2001},
  pages = {68-75},
  keywords = {Java, automatic programming, multi-threading, program diagnostics,
	synchronisationJlint1, Jlint2, Trilogy, arbitrary objects, automated
	program checking, commercial packages, complex software faults, flint,
	large software packages, large-scale multi-threaded Java programs,
	multi-threaded programs, multi-threading, program checkers, program
	state space, real large-scale software, static analysis, statistical
	analysis, synchronization statements, thread scheduling, thread synchronization,
	very fast Java program checker},
  owner = {dfsuther},
  timestamp = {2008.04.27}
}

@ARTICLE{Asanovic:2009,
  author = {Asanovic, Krste and Bodik, Rastislav and Demmel, James and Keaveny,
	Tony and Keutzer, Kurt and Kubiatowicz, John and Morgan, Nelson and
	Patterson, David and Sen, Koushik and Wawrzynek, John and Wessel,
	David and Yelick, Katherine},
  title = {A View of the Parallel Computing Landscape},
  journal = {Commun. ACM},
  year = {2009},
  volume = {52},
  pages = {56--67},
  number = {10},
  month = oct,
  acmid = {1562783},
  address = {New York, NY, USA},
  doi = {10.1145/1562764.1562783},
  issn = {0001-0782},
  issue_date = {October 2009},
  numpages = {12},
  owner = {dfsuther},
  publisher = {ACM},
  timestamp = {2014.05.06},
  url = {http://doi.acm.org/10.1145/1562764.1562783}
}

@ELECTRONIC{AspectJ2004,
  author = {{AspectJ Team}},
  year = {2004},
  title = {The {AspectJ} {P}rogramming {G}uide},
  url = {http://eclipse.org/aspectj/doc/released/\-progguide/index.html},
  institution = {Xerox Palo Alto Research Center},
  owner = {dfsuther},
  timestamp = {2008.02.15}
}

@MANUAL{Bar05,
  title = {Rationale for {Ada} 2005},
  author = {John Barnes},
  organization = {adaic.org},
  year = {2005},
  file = {Ada2005 Rationale.pdf:/Users/dfsuther/Documents/School/Thesis/Papers of Others/Ada2005 Rationale.pdf:PDF},
  owner = {dfsuther},
  timestamp = {2008.01.17},
  url = {http://www.adaic.org/standards/rationale05.html}
}

@TECHREPORT{bauer2013mobile,
  author = {Bauer, Lujo and Flynn, Lori and Jia, Limin and Klieber, Will and
	Long, Fred and Sutherland, Dean F and Svoboda, David},
  title = {Mobile SCALe: Rules and Analysis for Secure Java and Android Coding},
  institution = {Software Engineering Institute},
  year = {2013},
  abstract = {This report describes Android secure coding rules, guidelines, and
	static analysis that were developed as part of the Mobile Source
	Code Analysis Laboratory (SCALe) project. The project aims to create
	a set of rules that can be checked (and potentially enforced) and
	to develop checkers for these rules. These efforts are intended to
	increase confidence in continued safe and secure operation of mobile
	devices and the networks on which they operate. The focus for this
	phase of the project is the Android platform for mobile devices.
	Work described in this report involved three activities: (1) preparing
	the Java Coding Guidelines book for publication, (2) developing Android
	secure coding rules for the Android section of the CERT Oracle Secure
	Coding Standard for Java wiki, and (3) developing software that does
	static analysis of a set of Android apps for data flows between them
	so that security leaks can be detected.},
  owner = {dfsuther},
  timestamp = {2014.02.27},
  url = {http://repository.cmu.edu/sei/771/?utm_source=repository.cmu.edu%2Fsei%2F771&utm_medium=PDF&utm_campaign=PDFCoverPages}
}

@INPROCEEDINGS{Beckman2008,
  author = {Beckman, Nels E. and Bierhoff, Kevin and Aldrich, Jonathan},
  title = {Verifying Correct Usage of Atomic Blocks and Typestate},
  booktitle = {Proceedings of the 23rd ACM SIGPLAN Conference on Object-oriented
	Programming Systems Languages and Applications},
  year = {2008},
  series = {OOPSLA '08},
  pages = {227--244},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1449783},
  doi = {10.1145/1449764.1449783},
  isbn = {978-1-60558-215-3},
  keywords = {permissions, transactional memory, typestate},
  location = {Nashville, TN, USA},
  numpages = {18},
  owner = {dfsuther},
  timestamp = {2014.02.12},
  url = {http://doi.acm.org/10.1145/1449764.1449783}
}

@INPROCEEDINGS{Beckman2011,
  author = {Beckman, Nels E. and Nori, Aditya V.},
  title = {Probabilistic, Modular and Scalable Inference of Typestate Specifications},
  booktitle = {Proceedings of the 32Nd ACM SIGPLAN Conference on Programming Language
	Design and Implementation},
  year = {2011},
  series = {PLDI '11},
  pages = {211--221},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1993524},
  doi = {10.1145/1993498.1993524},
  isbn = {978-1-4503-0663-8},
  keywords = {aliasing, inference, object protocol, ownership, permission, specification,
	typestate},
  location = {San Jose, California, USA},
  numpages = {11},
  owner = {dfsuther},
  timestamp = {2014.02.12},
  url = {http://doi.acm.org/10.1145/1993498.1993524}
}

@INPROCEEDINGS{Bierhoff2007,
  author = {Bierhoff, Kevin and Aldrich, Jonathan},
  title = {Modular Typestate Checking of Aliased Objects},
  booktitle = {Proceedings of the 22Nd Annual ACM SIGPLAN Conference on Object-oriented
	Programming Systems and Applications},
  year = {2007},
  series = {OOPSLA '07},
  pages = {301--320},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1297050},
  doi = {10.1145/1297027.1297050},
  isbn = {978-1-59593-786-5},
  keywords = {aliasing, behavioral subtyping, linear logic, permissions, typestates},
  location = {Montreal, Quebec, Canada},
  numpages = {20},
  owner = {dfsuther},
  timestamp = {2014.02.12},
  url = {http://doi.acm.org/10.1145/1297027.1297050}
}

@INPROCEEDINGS{Bierhoff2005,
  author = {Kevin Bierhoff and Jonathan Aldrich},
  title = {{L}ightweight {O}bject {S}pecification with {T}ypestates},
  booktitle = {FSE},
  year = {2005},
  pages = {217--226},
  month = sep,
  owner = {dfsuther},
  timestamp = {2008.03.06}
}

@ELECTRONIC{Bowbeer2005,
  author = {Joseph Bowbeer},
  month = {May},
  year = {2005},
  title = {The Last Word in {Swing} Threads --
	
	{W}orking with Asynchronous Models},
  url = {http://java.sun.com/products/\-jfc/tsc/articles/\-threads/threads3.html},
  owner = {dfsuther},
  timestamp = {2008.04.26}
}

@INPROCEEDINGS{Boyapati2002,
  author = {Chandrasekhar Boyapati and Robert Lee and Martin Rinard},
  title = {Ownership types for safe programming: preventing data races and deadlocks},
  booktitle = {OOPSLA},
  year = {2002},
  pages = {211--230},
  owner = {dfsuther},
  timestamp = {2008.05.12}
}

@INPROCEEDINGS{Boyapati2001,
  author = {Chandrasekhar Boyapati and Martin Rinard},
  title = {A parameterized type system for race-free {Java} programs},
  booktitle = {OOPSLA},
  year = {2001},
  pages = {56--69},
  owner = {dfsuther},
  timestamp = {2008.04.18}
}

@INPROCEEDINGS{Boyland2003,
  author = {J. Boyland},
  title = {Checking interference with fractional permissions},
  booktitle = {Static Analysis: 10th International Symposium},
  year = {2003},
  editor = {R. Cousot},
  volume = {2694},
  series = {{LNCS}},
  pages = {55--72},
  abstract = {We describe a type system for checking interference using
	
	the concept of linear capabilities (which we call \permissions").
	Our in-
	
	novations include the concept of \fractional" permissions: reads can
	be
	
	permitted with fractional permissions whereas writes require complete
	
	permissions. This distinction expresses the fact that reads on the
	same
	
	state do not con°ict with each other. One may give shared read access
	
	at one point while still retaining write permission afterwards. We
	give an
	
	operational semantics of a simple imperative language with structured
	
	parallelism and prove that the permission system enables parallelism
	to
	
	proceed with deterministic results.},
  file = {:permissions-boyland.pdf:PDF},
  owner = {dfsuther},
  timestamp = {2008.04.19}
}

@ARTICLE{Boyland2001,
  author = {John Boyland},
  title = {Alias burying: unique variables without destructive reads},
  journal = {Softw. Pract. Exper.},
  year = {2001},
  volume = {31},
  pages = {533--553},
  number = {6},
  address = {New York, NY, USA},
  owner = {dfsuther},
  publisher = {John Wiley \& Sons, Inc.},
  timestamp = {2008.08.29}
}

@ARTICLE{BriandSep/Oct1999,
  author = {Briand, L.C.; Morasca, S.; Basili, V.R.},
  title = {Defining and validating measures for object-based high-level design
	},
  journal = {Transactions on Software Engineering},
  year = {Sep/Oct 1999},
  volume = {25},
  pages = {722-743},
  number = {5},
  abstract = {The availability of significant measures in the early phases of the
	software development life-cycle allows for better management of the
	later phases, and more effective quality assessment when quality
	can be more easily affected by preventive or corrective actions.
	We introduce and compare various high-level design measures for object-based
	software systems. The measures are derived based on an experimental
	goal, identifying fault-prone software parts, and several experimental
	hypotheses arising from the development of Ada systems for Flight
	Dynamics Software at the NASA Goddard Space Flight Center (NASA/GSFC).
	Specifically, we define a set of measures for cohesion and coupling,
	which satisfy a previously published set of mathematical properties
	that are necessary for any such measures to be valid. We then investigate
	the measures' relationship to fault-proneness on three large scale
	projects, to provide empirical support for their practical significance
	and usefulness},
  file = {DefValMeasOODes.pdf:/Users/dfsuther/Documents/School/Thesis/Papers of Others/DefValMeasOODes.pdf:PDF},
  keywords = {Ada, aerospace computing, object-oriented languages, object-oriented
	programming, software fault tolerance, software qualityAda systems,
	Flight Dynamics Software, NASA Goddard Space Flight Center, fault-prone
	software, high-level design, object-based high-level design, software
	development life-cycle, software quality assessment},
  owner = {dfsuther},
  timestamp = {2008.01.29}
}

@ARTICLE{Bryant1986,
  author = {Bryant, Randal E.},
  title = {Graph-Based Algorithms for Boolean Function Manipulation},
  journal = {IEEE Trans. Comput.},
  year = {1986},
  volume = {35},
  pages = {677--691},
  number = {8},
  month = aug,
  abstract = {In this paper we present a new data structure for representing Boolean
	functions and an associated set of manipulation algorithms. Functions
	are represented by directed, acyclic graphs in a manner similar to
	the representations introduced by Lee [1] and Akers [2], but with
	further restrictions on the ordering of decision variables in the
	graph. Although a function requires, in the worst case, a graph of
	size exponential in the number of arguments, many of the functions
	encountered in typical applications have a more reasonable representation.
	Our algorithms have time complexity proportional to the sizes of
	the graphs being operated on, and hence are quite efficient as long
	as the graphs do not grow too large. We present experimental results
	from applying these algorithms to problems in logic design verification
	that demonstrate the practicality of our approach.},
  acmid = {6433},
  address = {Washington, DC, USA},
  doi = {10.1109/TC.1986.1676819},
  issn = {0018-9340},
  issue_date = {August 1986},
  keywords = {Boolean functions, binary decision diagrams, logic design verification,
	symbolic manipulation, symbolic manipulation, Boolean functions,
	binary decision diagrams, logic design verification},
  numpages = {15},
  owner = {dfsuther},
  publisher = {IEEE Computer Society},
  timestamp = {2014.01.25},
  url = {http://dx.doi.org/10.1109/TC.1986.1676819}
}

@INPROCEEDINGS{Chan1998,
  author = {Edwin C. Chan and John T. Boyland and William L. Scherlis},
  title = {Promises: limited specifications for analysis and manipulation},
  booktitle = {ICSE '98: Proceedings of the 20th international conference on Software
	engineering},
  year = {1998},
  pages = {167--176},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  owner = {dfsuther},
  timestamp = {2008.08.29}
}

@INPROCEEDINGS{Clarke1998,
  author = {David G. Clarke and John M. Potter and James Noble},
  title = {Ownership types for flexible alias protection},
  booktitle = {OOPSLA},
  year = {1998},
  pages = {48--64},
  owner = {dfsuther},
  timestamp = {2008.04.19}
}

@INPROCEEDINGS{Corwin2003,
  author = {John Corwin and David F. Bacon and David Grove and Chet Murthy},
  title = {{MJ}: A {R}ational {M}odule {S}ystem for {Java} -- And its Applications},
  booktitle = {OOPSLA},
  year = {2003},
  pages = {241--254},
  citeseerurl = {http://citeseer.ist.psu.edu/694340.html},
  file = {ft_gateway.cfm.pdf:/Users/dfsuther/Documents/School/Papers/Modules/RelatedWork/ft_gateway.cfm.pdf:PDF},
  keywords = {Java, Modularity, Components, Language Design},
  owner = {dfsuther},
  timestamp = {2007.10.04}
}

@INPROCEEDINGS{Damas1982,
  author = {Damas, Luis and Milner, Robin},
  title = {Principal type-schemes for functional programs},
  booktitle = {POPL},
  year = {1982},
  pages = {207--212},
  publisher = {ACM},
  owner = {dfsuther},
  timestamp = {2009.07.05}
}

@MISC{DDCI2007,
  author = {DDC-I},
  title = {Ada Product Sheet},
  howpublished = {Web Download},
  month = {October},
  year = {2007},
  note = {Current as of Oct. 2007. DDCI sells and maintains some of Tartan's
	Ada compilation systems.},
  comment = {See page 7.},
  file = {DDCI-Ada-productSheet.pdf:/Users/dfsuther/Documents/School/Thesis/Papers of Others/DDCI-Ada-productSheet.pdf:PDF},
  owner = {dfsuther},
  timestamp = {2007.10.12},
  url = {http://www.ddci.com/Downloads/product_pdfs/Ada.pdf}
}

@INPROCEEDINGS{DeLine1999,
  author = {Robert DeLine},
  title = {Avoiding packaging mismatch with flexible packaging},
  booktitle = {ICSE '99: Proceedings of the 21st international conference on Software
	engineering},
  year = {1999},
  pages = {97--106},
  organization = {IEEE},
  publisher = {IEEE Computer Society Press},
  file = {p97-deline.pdf:/Users/dfsuther/Documents/School/Thesis/Papers of Others/p97-deline.pdf:PDF},
  owner = {dfsuther},
  timestamp = {2007.09.28}
}

@INPROCEEDINGS{DeLineFahndrich01,
  author = {DeLine, Robert and F\"{a}hndrich, Manuel},
  title = {Enforcing high-level protocols in low-level software},
  booktitle = {{PLDI}},
  year = {{2001}},
  pages = {{59--69}},
  publisher = {{ACM Press}},
  file = {p59-deline.pdf:/Users/dfsuther/Documents/School/Thesis/Papers of Others/p59-deline.pdf:PDF},
  owner = {dfsuther},
  timestamp = {2007.09.28}
}

@INPROCEEDINGS{Eder1992coupling,
  author = {J. Eder and G. Kappel and M. Schrefl},
  title = {Coupling and cohesion in object-oriented systems},
  booktitle = {Conference on Information and Knowledge Management},
  year = {1992},
  address = {Baltimore},
  file = {CouplingAndCohesionInOOSys.pdf:/Users/dfsuther/Documents/School/Thesis/Papers of Others/CouplingAndCohesionInOOSys.pdf:PDF},
  keywords = {coupling, cohesion, object oriented design},
  owner = {dfsuther},
  timestamp = {2007.12.24}
}

@ARTICLE{Elrad2001,
  author = {Elrad, Tzilla and Filman, Robert E. and Bader, Atef},
  title = {Aspect-oriented programming: Introduction},
  journal = {Commun. ACM},
  year = {2001},
  volume = {44},
  pages = {29--32},
  number = {10},
  month = {October},
  address = {New York, NY, USA},
  owner = {dfsuther},
  publisher = {ACM},
  timestamp = {2009.07.06}
}

@INPROCEEDINGS{Engler2003,
  author = {Dawson Engler and Ken Ashcraft},
  title = {{RacerX}: Effective, static detection of race conditions and deadlocks},
  booktitle = {SOSP},
  year = {2003},
  pages = {237--252},
  owner = {dfsuther},
  timestamp = {2008.04.27}
}

@INPROCEEDINGS{fahndrich/deline:02adoption,
  author = {Manuel F\"ahndrich and Robert DeLine},
  title = {Adoption and Focus: {P}ractical Linear Types for Imperative Programming},
  booktitle = {PLDI},
  address = {New York},
  publisher = {ACM Press},
  owner = {dfsuther},
  timestamp = {2008.04.15}
}

@PHDTHESIS{Fairbanks2007,
  author = {George Fairbanks},
  title = {Design Fragments},
  school = {Carnegie Mellon},
  year = {2007},
  abstract = {Frameworks are a valuable way to share designs and implementations
	on a large scale. Client programmers, however, have difficulty using
	frameworks. They find it difficult to understand non-local client-framework
	interactions, design solutions when they do not own the architectural
	skeleton, gain confidence that they have engaged with the framework
	correctly, represent their successful engagement with the framework
	in a way that can be shared with others, ensure their design intent
	is expressed in their source code, and connect with external files.
	
	
	A design fragment is a specification of how a client program can use
	framework resources to accomplish a goal. From the framework, it
	identifies the minimal set of classes, interfaces, and methods that
	should be employed. For the client program, it specifies the client-framework
	interactions that must be implemented. The structure of the client
	program is specified as roles, where the roles can be filled by an
	actual client program¡Çs classes, fields, and methods. A design fragment
	exists separately from client programs, and can be bound to the client
	program via annotations in their source code. These annotations express
	design intent; specifically, that it is the intention of the client
	programs to interact with the framework as specified by the design
	fragment.
	
	
	The thesis of this dissertation is: We can provide pragmatic help
	for programmers to use frameworks by providing a form of specification,
	called a design fragment, to describe how a client program can correctly
	employ a framework and by providing tools to assure conformance between
	the client program and the design fragments.
	
	
	We built tools into an IDE to demonstrate how design fragments could
	alleviate the difficulties experienced by client programmers. We
	performed two case studies on commercial Java frameworks, using demo
	client programs from the framework authors, and client programs we
	found on the internet. The first case study, on the Applet framework,
	yielded a complete catalog of twelve design fragments based on our
	analysis of fifty-six Applets. The second case study, on the larger
	Eclipse framework, yielded a partial catalog of fourteen design fragments
	based on our analysis of more than fifty client programs.
	
	
	This work provides three primary contributions to software engineering.
	First, it provides a new technique to help programmers use frameworks.
	Second, it provides a systematic way to increase code quality. Design
	fragments provide a means to communicate known-good designs to programmers,
	and, unlike simple copying of examples, a means of influencing the
	uses of that design so that revisions can be propagated. Third, it
	provides an empirically-based understanding of how clients use frameworks,
	which aids researchers in choosing research directions and aids framework
	authors in delivery of new frameworks.},
  keywords = {Design fragments, frameworks, object-oriented frameworks, patterns,
	interfaces},
  owner = {dfsuther},
  timestamp = {2008.03.14},
  url = {http://reports-archive.adm.cs.cmu.edu/anon/isri2007/abstracts/07-108.html}
}

@INPROCEEDINGS{Fairbanks2006,
  author = {George Fairbanks and David Garlan and William Scherlis},
  title = {Design {F}ragments make using frameworks easier},
  year = {2006},
  volume = {41},
  number = {10},
  pages = {75--88},
  address = {New York, NY, USA},
  publisher = {ACM},
  journal = {SIGPLAN Not.},
  owner = {dfsuther},
  timestamp = {2008.03.14}
}

@INPROCEEDINGS{flanagan/freund:00race,
  author = {Cormac Flanagan and Stephen N. Freund},
  title = {Type-Based Race Detection for {Java}},
  booktitle = {PLDI},
  year = {2000},
  owner = {dfsuther},
  timestamp = {2008.04.15}
}

@ARTICLE{Flanagan2000,
  author = {Cormac Flanagan and Stephen N. Freund},
  title = {Type-based race detection for {Java}},
  journal = {SIGPLAN Not.},
  year = {2000},
  volume = {35},
  pages = {219--232},
  number = {5},
  address = {New York, NY, USA},
  file = {:Users/dfsuther/Documents/School/Thesis/Papers of Others/p219-flanagan.pdf:PDF},
  owner = {dfsuther},
  publisher = {ACM},
  timestamp = {2008.04.24}
}

@INPROCEEDINGS{Flanagan2001,
  author = {Cormac Flanagan and K. Rustan M. Leino},
  title = {Houdini, an Annotation Assistant for {ESC/Java}},
  booktitle = {FME '01: Proceedings of the International Symposium of Formal Methods
	Europe on Formal Methods for Increasing Software Productivity},
  year = {2001},
  pages = {500--517},
  address = {London, UK},
  publisher = {Springer-Verlag},
  owner = {dfsuther},
  timestamp = {2008.04.16}
}

@INPROCEEDINGS{flanagan/etal:02esc,
  author = {Cormac Flanagan and K. Rustan M. Leino and Mark Lillibridge and Greg
	Nelson and James B. Saxe and Raymie Stata},
  title = {Extended Static Checking for {J}ava},
  booktitle = {PLDI},
  address = {New York},
  publisher = {ACM Press},
  owner = {dfsuther},
  timestamp = {2008.04.15}
}

@ARTICLE{Flanagan2002,
  author = {Cormac Flanagan and K. Rustan M. Leino and Mark Lillibridge and Greg
	Nelson and James B. Saxe and Raymie Stata},
  title = {Extended static checking for {Java}},
  journal = {SIGPLAN Not.},
  year = {2002},
  volume = {37},
  pages = {234--245},
  number = {5},
  address = {New York, NY, USA},
  owner = {dfsuther},
  publisher = {ACM},
  timestamp = {2008.04.05}
}

@TECHREPORT{Flatt1997,
  author = {Flatt, Matthew},
  title = {{PLT} {MzScheme}: {L}anguage {M}anual},
  institution = {Rice University},
  year = {1997},
  number = {TR97-280},
  keywords = {modules},
  owner = {dfsuther},
  timestamp = {2008.04.12}
}

@ARTICLE{Franz1997,
  author = {M. Franz},
  title = {The {P}rogramming {L}anguage {L}agoona: A Fresh Look at {O}bject-{O}rientation},
  journal = {Software - Concepts and Tools},
  year = {1997},
  volume = {18},
  pages = {14-26},
  number = {1},
  owner = {dfsuther},
  timestamp = {2008.04.12}
}

@MISC{Galbraith04,
  author = {Ben Galbraith},
  title = {An Introduction to {SWT}},
  howpublished = {JavaLobby Expert Presentation Series},
  month = {November},
  year = {2004},
  note = {Slides and voice track},
  owner = {dfsuther},
  timestamp = {2008.02.29},
  url = {http://www.javalobby.org/eps/swt_intro/}
}

@MISC{JHotDraw,
  author = {Gamma, Erich and Eggenschwiler, Thomas},
  title = {JHotDraw},
  note = {http://www.jhotdraw.org/},
  owner = {dfsuther},
  timestamp = {2008.08.31},
  url = {http://www.jhotdraw.org/}
}

@BOOK{Gamma1995,
  title = {Design patterns: elements of reusable object-oriented software},
  publisher = {Addison-Wesley Longman Publishing Co., Inc.},
  year = {1995},
  author = {Erich Gamma and Richard Helm and Ralph Johnson and John Vlissides},
  pages = {395},
  series = {Addison-Wesley Professional Computing Series},
  address = {Boston, MA, USA},
  owner = {dfsuther},
  timestamp = {2008.03.04}
}

@INPROCEEDINGS{Garlan1997,
  author = {David Garlan and Robert Monroe and David Wile},
  title = {Acme: an architecture description interchange language},
  booktitle = {CASCON '97: Proceedings of the 1997 conference of the Centre for
	Advanced Studies on Collaborative research},
  year = {1997},
  pages = {7},
  publisher = {IBM Press},
  file = {ACME Language:/Users/dfsuther/Documents/School/Thesis/Papers of Others/acme-cascon97.pdf:PDF},
  location = {Toronto, Ontario, Canada},
  owner = {dfsuther},
  timestamp = {2008.01.30}
}

@INPROCEEDINGS{Gordon:2013,
  author = {Gordon, Colin S. and Dietl, Werner and Ernst, Michael D. and Grossman,
	Dan},
  title = {JavaUI: Effects for Controlling UI Object Access},
  booktitle = {Proceedings of the 27th European Conference on Object-Oriented Programming},
  year = {2013},
  series = {ECOOP'13},
  pages = {179--204},
  address = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  acmid = {2524995},
  doi = {10.1007/978-3-642-39038-8_8},
  isbn = {978-3-642-39037-1},
  location = {Montpellier, France},
  numpages = {26},
  owner = {dfsuther},
  timestamp = {2014.01.22}
}

@PHDTHESIS{Greenhouse2003,
  author = {Aaron Greenhouse},
  title = {A Programmer-oriented Approach to Safe Concurrency},
  school = {Carnegie Mellon},
  year = {2003},
  month = {May},
  order_no = {AAI3121270},
  owner = {dfsuther},
  publisher = {Carnegie Mellon University},
  timestamp = {2008.04.20}
}

@INPROCEEDINGS{Greenhouse1999,
  author = {Aaron Greenhouse and John Boyland},
  title = {An {O}bject-{O}riented Effects System},
  booktitle = {ECOOP},
  year = {1999},
  pages = {205--229},
  owner = {dfsuther},
  timestamp = {2008.04.01}
}

@ARTICLE{Greenhouse2005,
  author = {Aaron Greenhouse and T. J. Halloran and William L. Scherlis},
  title = {Observations on the assured evolution of concurrent {Java} programs},
  journal = {Sci. Comput. Program.},
  year = {2005},
  volume = {58},
  pages = {384--411},
  number = {3},
  abstract = {Evolving and refactoring concurrent Java software can be error-prone,
	resulting in race conditions and other concurrency difficulties.
	We suggest that there are two principal causes: concurrency design
	intent is often not explicit in code and, additionally, consistency
	of intent and code cannot easily be established through either testing
	or inspection.We explore several aspects of this issue in this paper.
	First, we describe a tool-assisted approach to modeling and assurance
	for concurrent programs. Second, we give an account of recent case
	study experience on larger-scale production Java systems. Third,
	we suggest an approach to scalable co-evolution of code and models
	that is designed to support working programmers without special training
	or incentives. Fourth, we propose some concurrency-related refactorings
	that, with suitable analysis and tool support, can potentially offer
	assurances of soundness.},
  file = {Greenhouse-SoCP.pdf:/Users/dfsuther/Documents/School/Thesis/Papers of Others/Greenhouse-SoCP.pdf:PDF},
  keywords = {Java, concurrency, program assurance, program evolution, program transformation,
	refactoring, static analysis},
  owner = {dfsuther},
  timestamp = {2007.11.14}
}

@INPROCEEDINGS{Greenhouse2003a,
  author = {Aaron Greenhouse and T. J. Halloran and William L. Scherlis},
  title = {Using {E}clipse to demonstrate positive static assurance of {Java}
	program concurrency design intent},
  booktitle = {{E}clipse '03: Proc. of the 2003 OOPSLA Workshop on {E}clipse technology
	e{X}change},
  year = {2003},
  pages = {99--103},
  address = {New York, NY, USA},
  publisher = {ACM},
  owner = {dfsuther},
  timestamp = {2008.04.20}
}

@INPROCEEDINGS{Greenhouse2002,
  author = {Aaron Greenhouse and William L. Scherlis},
  title = {Assuring and evolving concurrent programs: annotations and policy},
  booktitle = {ICSE '02: Proceedings of the 24th International Conference on Software
	Engineering},
  year = {2002},
  pages = {453--463},
  address = {New York, NY, USA},
  publisher = {ACM},
  owner = {dfsuther},
  timestamp = {2008.08.29}
}

@MANUAL{Greenhouse2006,
  title = {An Introduction to Declaring Design Intent in Fluid},
  author = {Aaron Greenhouse and The Fluid Team},
  organization = {Carnegie Mellon, Institute for Software Research},
  address = {5000 Forbes Ave, Pittsburgh PA 15213},
  month = {July},
  year = {2006},
  file = {Annotation Handout:http\://www.fluid.cs.cmu.edu\:8080/Fluid/annotation-handout.html:URL},
  owner = {dfsuther},
  timestamp = {2008.03.20},
  url = {http://www.fluid.cs.cmu.edu:8080/Fluid/annotation-handout.html}
}

@ARTICLE{grossman/etal:00syntactic,
  author = {Dan Grossman and Greg Morrisett and Steve Zdancewic},
  title = {Syntactic Type Abstraction},
  journal = {ACM TOPLAS},
  year = {2000},
  volume = {22},
  number = {6},
  owner = {dfsuther},
  timestamp = {2008.04.15}
}

@TECHREPORT{Grune1986,
  author = {D. Grune},
  title = {Concurrent Versions System, A Method for Independent Cooperation},
  institution = {Vrije Universiteit},
  year = {1986},
  number = {IR 113},
  address = {Amsterdam},
  citeseerurl = {http://citeseer.ist.psu.edu/174687.html},
  file = {Concurrent Versions System:/Users/dfsuther/Documents/School/Thesis/Papers of Others/Concurrent_Versions_System,_a_method_for_independent_cooperation.ps:PostScript},
  owner = {dfsuther},
  timestamp = {2008.02.08}
}

@PHDTHESIS{Hallorantoappear,
  author = {Timothy J. Halloran},
  title = {Towards a Scalable and Adoptable Approach to Analysis-based Verification
	of Mechanical Program Properties},
  school = {Carnegie Mellon},
  year = {to appear},
  owner = {dfsuther},
  timestamp = {2008.04.21}
}

@PHDTHESIS{Halloran2010,
  author = {Halloran, T. J.},
  title = {Analysis-based Verification: A Programmer-oriented Approach to the
	Assurance of Mechanical Program Properties},
  school = {Carnegie Mellon},
  year = {2010},
  address = {Pittsburgh, PA, USA},
  note = {AAI3414068},
  abstract = {There is a constant and insidious loss of design intent throughout
	the software lifecycle. Developers make design decisions but fail
	to record these decisions or their rationale. As a consequence, quality
	and maintainability of software suffer, since additional effort must
	be expended to recover—and verify—lost design intent prior to implementing
	even minor changes in the code. This is particularly challenging
	for concurrent code. Our vision is to capture and verify critical
	design intent through the use of fragmentary specifications supported
	by targeted verification tools that can function alongside debugging
	and testing tools in the practitioner's toolkit for software quality
	and maintainability.
	
	This thesis advances the idea of focused analysis-based verification
	as a scalable and adoptable approach to the verification of mechanical
	program properties. The main contribution of the research is the
	development of the concept of sound combined analyses, through which
	results of diverse low-level program analyses can be combined in
	a sound way to yield results of interest to software developers.
	The contribution includes the underlying logic of combined analysis,
	the design of the user experience and tool engineering approach,
	and field validation on diverse commercial and open source code bases.
	Building on prior work in semantic program analysis, this approach
	enables sound tool-supported verification of nontrivial narrowly-focused
	mechanical properties about programs with respect to explicit models
	of design intent. These models are typically expressed as code annotations,
	and can be used even when adopted late in the software lifecycle
	for real-world systems.
	
	
	In addition to providing a sound approach to combining fragmentary
	analysis results, the logic can support abductive inference of additional
	fragments of design intent. The proposed fragments that are deemed
	valid by the software developer can then be verified for consistency
	with code using an automated tool. The soundness of the logic for
	combined analysis is proved using an intuitionistic natural deduction
	calculus and other techniques. We validate our approach through the
	9 field trials of a prototype tool that verifies properties related
	to multithreading and race conditions on a diverse sample of commercial,
	open source, and government code. In the majority of the field trials,
	this validation process included direct use of the prototype tool
	by disinterested professional developers and demonstrated that the
	tool performs useful verification and bug finding on full-scale production
	code.},
  advisor = {Scherlis, William L.},
  isbn = {978-1-124-05818-4},
  owner = {dfsuther},
  publisher = {Carnegie Mellon University},
  timestamp = {2014.01.22}
}

@INPROCEEDINGS{Hardekopf:2011:FPA:2190025.2190075,
  author = {Hardekopf, Ben and Lin, Calvin},
  title = {Flow-sensitive Pointer Analysis for Millions of Lines of Code},
  booktitle = {Proceedings of the 9th Annual IEEE/ACM International Symposium on
	Code Generation and Optimization},
  year = {2011},
  series = {CGO '11},
  pages = {289--298},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  acmid = {2190075},
  isbn = {978-1-61284-356-8},
  numpages = {10},
  owner = {dfsuther},
  timestamp = {2013.11.20},
  url = {http://dl.acm.org/citation.cfm?id=2190025.2190075}
}

@INPROCEEDINGS{Henzinger2004,
  author = {Thomas A. Henzinger and Ranjit Jhala and Rupak Majumdar},
  title = {Race checking by context inference},
  booktitle = {PLDI},
  year = {2004},
  pages = {1--13},
  owner = {dfsuther},
  timestamp = {2008.04.27}
}

@INPROCEEDINGS{Hovemeyer2004,
  author = {Hovemeyer, David and Pugh, William},
  title = {Finding bugs is easy},
  booktitle = {Companion to the 19th annual ACM SIGPLAN conference on Object-oriented
	programming systems, languages, and applications},
  year = {2004},
  series = {OOPSLA '04},
  pages = {132--136},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1028717},
  doi = {http://doi.acm.org/10.1145/1028664.1028717},
  isbn = {1-58113-833-4},
  keywords = {bug checkers, bug patterns, bugs, static analysis},
  location = {Vancouver, BC, CANADA},
  numpages = {5},
  owner = {dfsuther},
  timestamp = {2011.03.18},
  url = {http://doi.acm.org/10.1145/1028664.1028717}
}

@INPROCEEDINGS{Huang:2011:PPC:2001420.2001438,
  author = {Huang, Jeff and Zhang, Charles},
  title = {Persuasive prediction of concurrency access anomalies},
  booktitle = {Proceedings of the 2011 International Symposium on Software Testing
	and Analysis},
  year = {2011},
  series = {ISSTA '11},
  pages = {144--154},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {2001438},
  doi = {10.1145/2001420.2001438},
  isbn = {978-1-4503-0562-4},
  keywords = {access anomaly, bug detection, persuasive},
  location = {Toronto, Ontario, Canada},
  numpages = {11},
  owner = {dfsuther},
  timestamp = {2013.03.01},
  url = {http://doi.acm.org/10.1145/2001420.2001438}
}

@INPROCEEDINGS{Igarashi2001,
  author = {Atshushi Igarashi and Benjamin Pierce and Philip Wadler},
  title = {{Featherweight Java}: {A} Minimal Core Calculus for {Java} and {GJ}},
  booktitle = {{OOPSLA}},
  year = {1999},
  editor = {Loren Meissner},
  volume = {34(10)},
  pages = {132--146},
  address = {N. Y.},
  abstract = {Several recent studies have introduced lightweight versions of Java:
	
	reduced languages in which complex features like threads and reflection
	are dropped to enable rigorous
	
	arguments about key properties such as type safety. We carry this
	process a step further, omitting
	
	almost all features of the full language (including interfaces and
	even assignment) to obtain a small
	
	calculus, Featherweight Java, for which rigorous proofs are not only
	possible but easy.
	
	Featherweight Java bears a similar relation to full Java as the lambda-calculus
	does to languages
	
	such as ML and Haskell. It offers a similar computational "feel,"
	providing classes, methods, fields,
	
	inheritance, and dynamic typecasts, with a semantics closely following
	Java's. A proof of type safety for
	
	Featherweight Java thus illustrates many of the interesting features
	of a safety proof for the full language,
	
	while remaining pleasingly compact. The syntax, type rules, and operational
	semantics of Featherweight
	
	Java fit on one page...},
  timestamp = {2007.07.10},
  url = {citeseer.ist.psu.edu/igarashi99featherweight.html}
}

@MANUAL{AARM2005,
  title = {Ada 2005 Annotated Reference Manual. ISO/IEC 8652:1995(E) with Technical
	Corrigendum 1 and Amendment 1, 2006.},
  author = {{ISO SC22/WG9}},
  organization = {International Standards Organization},
  file = {Ada2005 AARM.pdf:/Users/dfsuther/Documents/School/Thesis/Papers of Others/Ada2005 AARM.pdf:PDF},
  owner = {dfsuther},
  timestamp = {2008.01.17},
  url = {http://www.adaic.com/standards/ada05.html}
}

@TECHREPORT{Choi2001,
  author = {J. Choi, A. Loginov, and V. Sarkar},
  title = {Static datarace analysis for multithreaded object-oriented programs},
  institution = {IBM Research},
  year = {2001},
  number = {RC22146},
  file = {:Users/dfsuther/Documents/School/Thesis/Papers of Others/StaticDataraceforOOP.pdf:PDF},
  owner = {dfsuther},
  timestamp = {2008.04.27}
}

@ARTICLE{Jackson2009,
  author = {Jackson, Daniel},
  title = {A direct path to dependable software},
  journal = {Commun. ACM},
  year = {2009},
  volume = {52},
  pages = {78--88},
  number = {4},
  abstract = {Who could fault an approach that offers greater credibility at reduced
	cost?},
  address = {New York, NY, USA},
  file = {A Direct Path to Dependable Software:p78-jackson.pdf:PDF},
  owner = {dfsuther},
  publisher = {ACM},
  timestamp = {2009.07.08}
}

@INPROCEEDINGS{Jagannath:2011:IMU:2025113.2025145,
  author = {Jagannath, Vilas and Gligoric, Milos and Jin, Dongyun and Luo, Qingzhou
	and Rosu, Grigore and Marinov, Darko},
  title = {Improved multithreaded unit testing},
  booktitle = {Proceedings of the 19th ACM SIGSOFT symposium and the 13th European
	conference on Foundations of software engineering},
  year = {2011},
  series = {ESEC/FSE '11},
  pages = {223--233},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {2025145},
  doi = {10.1145/2025113.2025145},
  isbn = {978-1-4503-0443-6},
  keywords = {imunit, multithreaded code, unit testing},
  location = {Szeged, Hungary},
  numpages = {11},
  owner = {dfsuther},
  timestamp = {2013.03.01},
  url = {http://doi.acm.org/10.1145/2025113.2025145}
}

@ELECTRONIC{JSR294,
  author = {{JSR294 Expert Group}},
  title = {{JSR 294}: Improved Modularity Support in the {Java} Programming
	Language},
  organization = {Java Community Process},
  url = {http://jcp.org/en/jsr/detail?id=294},
  abstract = {2.1 Please describe the proposed Specification:
	
	We plan to extend the Java programming language with new constructs
	(tentatively called "superpackages") that allow hierarchical modular
	organization. We expect these constructs to be supported at the virtual
	machine level, through modifications or extensions to the JVMs access
	control rules.},
  keywords = {Information Hiding, modules, separate compilation},
  owner = {dfsuther},
  timestamp = {2007.08.29}
}

@STANDARD{JSR308,
  title = {JSR308:},
  organization = {Java Community Process},
  author = {{JSR308 Expert Group}},
  url = {https://jcp.org/en/jsr/detail?id=308},
  owner = {dfsuther},
  timestamp = {2014.01.29}
}

@MISC{Kenn08,
  author = {Andrew J. Kennedy},
  title = {Formalizing an Extensional Semantics for Units of Measure},
  year = {2008},
  citeseerurl = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.147.8407},
  doi = {10.1.1.147.8407},
  owner = {dfsuther},
  timestamp = {2010.07.28}
}

@INPROCEEDINGS{Kennedy97,
  author = {Kennedy, Andrew J.},
  title = {Relational parametricity and units of measure},
  booktitle = {POPL '97: Proceedings of the 24th ACM SIGPLAN-SIGACT symposium on
	Principles of programming languages},
  year = {1997},
  pages = {442--455},
  address = {New York, NY, USA},
  publisher = {ACM},
  doi = {http://doi.acm.org/10.1145/263699.263761},
  isbn = {0-89791-853-3},
  location = {Paris, France},
  owner = {dfsuther},
  timestamp = {2010.07.28}
}

@INPROCEEDINGS{LLVM:CGO04,
  author = {Chris Lattner and Vikram Adve},
  title = {{LLVM: A Compilation Framework for Lifelong Program Analysis \& Transformation}},
  booktitle = {{Proceedings of the 2004 International Symposium on Code Generation
	and Optimization (CGO'04)}},
  year = {2004},
  address = {Palo Alto, California},
  month = {Mar},
  owner = {dfsuther},
  timestamp = {2013.01.10}
}

@INCOLLECTION{leavens/etal:99jml,
  author = {Gary T. Leavens and Albert L. Baker and Clyde Ruby},
  title = {{JML}: {A} Notation for Detailed Design},
  booktitle = {Behavioral Specifications of Businesses and Systems},
  publisher = {Kluwer},
  year = {1999},
  editor = {Haim Kilov and Bernhard Rumpe and Ian Simmonds},
  owner = {dfsuther},
  timestamp = {2008.04.15}
}

@ARTICLE{Leavens2006,
  author = {Gary T. Leavens and Albert L. Baker and Clyde Ruby},
  title = {Preliminary design of {JML}: a behavioral interface specification
	language for java},
  journal = {SIGSOFT Softw. Eng. Notes},
  year = {2006},
  volume = {31},
  pages = {1--38},
  number = {3},
  address = {New York, NY, USA},
  owner = {dfsuther},
  publisher = {ACM},
  timestamp = {2008.04.20}
}

@TECHREPORT{leino/etal:00escjava,
  author = {K. Rustan M. Leino and Greg Nelson and James B. Saxe},
  title = {{ESC}/{Java} User's Manual},
  institution = {Compaq SRC},
  year = {2000},
  type = {Technical Note},
  number = {2000-002},
  address = {Palo Alto, CA},
  owner = {dfsuther},
  timestamp = {2008.04.15}
}

@INPROCEEDINGS{Lu:2013:IPA:2450247.2450255,
  author = {Lu, Yi and Shang, Lei and Xie, Xinwei and Xue, Jingling},
  title = {An Incremental Points-to Analysis with CFL-Reachability},
  booktitle = {Proceedings of the 22Nd International Conference on Compiler Construction},
  year = {2013},
  series = {CC'13},
  pages = {61--81},
  address = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  acmid = {2450255},
  doi = {10.1007/978-3-642-37051-9_4},
  isbn = {978-3-642-37050-2},
  location = {Rome, Italy},
  numpages = {21},
  owner = {dfsuther},
  timestamp = {2013.11.20},
  url = {http://dx.doi.org/10.1007/978-3-642-37051-9_4}
}

@INPROCEEDINGS{McDirmid2001,
  author = {Sean McDirmid and Matthew Flatt and Wilson C. Hsieh},
  title = {Jiazzi: new-age components for old-fasioned {Java}},
  booktitle = {{OOPSLA}},
  year = {2001},
  pages = {211--222},
  address = {New York, NY, USA},
  publisher = {ACM Press},
  abstract = {We present Jiazzi, a system that enables the construction of large-scale
	binary components in Java. Jiazzi components can be thought of as
	generalizations of Java packages with added support for external
	linking and separate compilation. Jiazzi components are practical
	becuase they are constructed out of standard Java source code. Jiazzi
	requires neither extensions to the Java language nor special conventions
	for writing Java source code that will go inside a component. Our
	components are expressive becuase Jiazzi supports cyclic component
	linking and mixins, which are used together in an open class pattern
	that enables the modular addition of new features to existing classes.
	This paper describes Jiazzi, how it enhances Java with components,
	its implementation, and how type checking works. An implementation
	of Jiazzi is available for download.},
  owner = {dfsuther},
  timestamp = {2007.10.02}
}

@BOOK{Muchnick1997,
  title = {Advanced compiler design and implementation},
  publisher = {Morgan Kaufmann Publishers Inc.},
  year = {1997},
  author = {Steven S. Muchnick},
  address = {San Francisco, CA, USA},
  owner = {dfsuther},
  timestamp = {2008.09.03}
}

@ELECTRONIC{Muller2000,
  author = {Hans Muller and Kathy Walrath},
  month = {September},
  year = {2000},
  title = {{T}hreads and {S}wing},
  howpublished = {Sun Developer Network},
  url = {http://java.sun.com/products/jfc/tsc/articles/threads/threads1.html},
  owner = {dfsuther},
  timestamp = {2008.04.26}
}

@INPROCEEDINGS{murphy95software,
  author = {Gail C. Murphy and David Notkin and Kevin Sullivan},
  title = {Software reflexion models: bridging the gap between source and high-level
	models},
  booktitle = {SIGSOFT '95: Proceedings of the 3rd ACM SIGSOFT symposium on Foundations
	of software engineering},
  year = {1995},
  pages = {18--28},
  address = {New York, NY, USA},
  publisher = {ACM},
  file = {Software Reflexion Models:/Users/dfsuther/Documents/School/Thesis/Papers of Others/SoftwareReflexion.pdf:PDF},
  owner = {dfsuther},
  timestamp = {2008.01.30}
}

@INPROCEEDINGS{Naik2006,
  author = {Naik, Mayur and Aiken, Alex and Whaley, John},
  title = {Effective static race detection for {Java}},
  booktitle = {PLDI '06},
  year = {2006},
  pages = {308--319},
  location = {Ottawa, Ontario, Canada}
}

@INPROCEEDINGS{naumovich/avrunin:98mhp,
  author = {Gleb Naumovich and George S. Avunin},
  title = {A Conservative Data Flow Algorithm for Detecting All Pairs of Statements
	that May Happen in Parallel},
  booktitle = {FSE '98},
  publisher = {ACM Press},
  owner = {dfsuther},
  timestamp = {2008.04.15}
}

@INPROCEEDINGS{naumovich/etal:99checking,
  author = {Gleb Naumovich and George S. Avunin and Lori A. Clarke},
  title = {Data Flow Analysis for Checking Properites of Concurrent {Java} Programs},
  booktitle = {ICSE '99},
  publisher = {IEEECS},
  owner = {dfsuther},
  timestamp = {2008.04.15}
}

@INPROCEEDINGS{naumovich/etal:99mhp,
  author = {Gleb Naumovich and George S. Avunin and Lori A. Clarke},
  title = {An Efficient Algorithm for Computing {MHP} Information for Concurrent
	{Java} Programs},
  booktitle = {FSE '99},
  publisher = {Springer},
  owner = {dfsuther},
  timestamp = {2008.04.15}
}

@MISC{Newcomer2001,
  author = {Joseph M. Newcomer},
  title = {Using Worker Threads},
  month = {Jan},
  year = {2001},
  owner = {dfsuther},
  timestamp = {2008.04.21},
  url = {http://www.flounder.com/workerthreads.htm}
}

@INPROCEEDINGS{Nimmer2002,
  author = {Jeremy W. Nimmer and Michael D. Ernst},
  title = {Invariant inference for static checking:},
  booktitle = {SIGSOFT '02/FSE-10: Proceedings of the 10th ACM SIGSOFT symposium
	on Foundations of software engineering},
  year = {2002},
  pages = {11--20},
  address = {New York, NY, USA},
  publisher = {ACM},
  owner = {dfsuther},
  timestamp = {2008.04.20}
}

@INPROCEEDINGS{Nimmer2002a,
  author = {Jeremy W. Nimmer and Michael D. Ernst},
  title = {Automatic generation of program specifications},
  booktitle = {ISSTA '02: Proceedings of the 2002 ACM SIGSOFT international symposium
	on Software testing and analysis},
  year = {2002},
  pages = {229--239},
  address = {New York, NY, USA},
  publisher = {ACM},
  owner = {dfsuther},
  timestamp = {2008.04.21}
}

@INPROCEEDINGS{author,
  author = {Oh, Hakjoo and Heo, Kihong and Lee, Wonchan and Lee, Woosuk and Yi,
	Kwangkeun},
  title = {Design and Implementation of Sparse Global Analyses for C-like Languages},
  booktitle = {Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language
	Design and Implementation},
  year = {2012},
  series = {PLDI '12},
  pages = {229--238},
  address = {New York, NY, USA},
  publisher = {ACM},
   = {Oh, Hakjoo and Heo, Kihong and Lee, Wonchan and Lee, Woosuk and Yi,
	Kwangkeun},
  acmid = {2254092},
  doi = {10.1145/2254064.2254092},
  isbn = {978-1-4503-1205-9},
  keywords = {abstract interpretation, sparse analysis, static analysis},
  location = {Beijing, China},
  numpages = {10},
  owner = {dfsuther},
  timestamp = {2013.11.20},
  url = {http://doi.acm.org/10.1145/2254064.2254092}
}

@INPROCEEDINGS{Parnas1994,
  author = {David Lorge Parnas},
  title = {Software aging},
  booktitle = {ICSE '94: Proceedings of the 16th international conference on Software
	engineering},
  year = {1994},
  pages = {279--287},
  address = {Los Alamitos, CA, USA},
  publisher = {IEEE Computer Society Press},
  abstract = {Programs, like people, get old. We can ‘t prevent
	
	aging, but we can understand its causes, take steps to
	
	limits its effects, temporarily reverse some of the
	
	damage it has caused, and prepare for the day when
	
	the software is no longer viable. A sign that the
	
	Software Engineering profession has matured will be
	
	that we lose our preoccupation with the jirst release
	
	and focus on the long term health of our products.
	
	Researchers and practitioners must change their
	
	perception of the problems of software development.
	
	Only then will Soflware Engineering deserve to be
	
	called Engineering.},
  location = {Sorrento, Italy},
  owner = {dfsuther},
  timestamp = {2008.01.29}
}

@ARTICLE{Parnas1972,
  author = {D. L. Parnas},
  title = {On the criteria to be used in decomposing systems into modules},
  journal = {Commun. ACM},
  year = {1972},
  volume = {15},
  pages = {1053--1058},
  number = {12},
  month = {December},
  abstract = {This paper discusses modularization as a mechanism for improving the
	flexibility and comprehensibility of a system while allowing the
	shortening of its development time. The effectiveness of a “modularization”
	is dependent upon the criteria used in dividing the system into modules.
	A system design problem is presented and both a conventional and
	unconventional decomposition are described. It is shown that the
	unconventional decompositions have distinct advantages for the goals
	outlined. The criteria used in arriving at the decompositions are
	discussed. The unconventional decomposition, if implemented with
	the conventional assumption that a module consists of one or more
	subroutines, will be less efficient in most cases. An alternative
	approach to implementation which does not have this effect is sketched.},
  file = {p1053-parnas.pdf:/Users/dfsuther/Documents/School/Thesis/Papers of Others/p1053-parnas.pdf:PDF},
  owner = {dfsuther},
  timestamp = {2007.11.14}
}

@INPROCEEDINGS{Payet:2011:SAA:2032266.2032299,
  author = {Payet, \'{E}tienne and Spoto, Fausto},
  title = {Static analysis of Android programs},
  booktitle = {Proceedings of the 23rd international conference on Automated deduction},
  year = {2011},
  series = {CADE'11},
  pages = {439--445},
  address = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  acmid = {2032299},
  isbn = {978-3-642-22437-9},
  location = {Wroc\&\#322;aw, Poland},
  numpages = {7},
  owner = {dfsuther},
  timestamp = {2013.03.01},
  url = {http://dl.acm.org/citation.cfm?id=2032266.2032299}
}

@BOOK{Goetz2005,
  title = {Java Concurrency in Practice},
  publisher = {Addison-Wesley Professional},
  year = {2005},
  author = {Peierls, Tim and Goetz, Brian and Bloch, Joshua and Bowbeer, Joseph
	and Lea, Doug and Holmes, David},
  owner = {dfsuther},
  timestamp = {2009.06.14}
}

@ELECTRONIC{perry:02bluepanels,
  author = {Tom Perry},
  title = {Blue Panels with Swing {FIXED}},
  howpublished = {\url{http://lists.apple.com/mhonarc/\-java-dev/msg16355.html}},
  abstract = {We found the source of the flashing in our UI. We discovered that
	we were periodically blocking the AWT thread...oops! Our app is really
	quite large, and that made it rather difficult to isolate the cause
	of the problem. Fortunately, with some spelunking we were able to
	determine where our problem lay. I just wanted to let other folks
	know in case it might help. If you're UI is flashing with a blue
	background - keep digging, you may have blocked the AWT thread somewhere.},
  owner = {dfsuther},
  timestamp = {2008.04.15}
}

@INPROCEEDINGS{Ploedereder1989,
  author = {E. Ploedereder and A. Fergany},
  title = {The data model of the configuration management assistant (CMA)},
  booktitle = {Proceedings of the 2nd International Workshop on Software configuration
	management},
  year = {1989},
  pages = {5--14},
  address = {New York, NY, USA},
  organization = {ACM},
  publisher = {ACM},
  abstract = {In an environment in which systems are configured by reusing existing
	subsystems, the determination of complete and consistent configurations
	is a non-trivial and error-prone task, although considerable information
	about the subsystems may already be available from previous configurations.
	The Configuration Management Assistant is a tool that supports tracking
	and exploiting such information in the difficult process of re-configuration
	on a large scale. Its data model was designed to be as independent
	as possible of configuration management policies and procedures and
	yet provide substantive assistance in this process. The most important
	elements of this data model are described in this paper.},
  file = {p5-ploedereder.pdf:/Users/dfsuther/Documents/School/Thesis/Papers of Others/p5-ploedereder.pdf:PDF},
  owner = {dfsuther},
  timestamp = {2007.11.09}
}

@INPROCEEDINGS{Pratikakis2006,
  author = {Polyvios Pratikakis and Jeffrey S. Foster and Michael Hicks},
  title = {LOCKSMITH: {C}ontext-sensitive correlation analysis for race detection},
  booktitle = {PLDI '06},
  year = {2006},
  pages = {320--331},
  owner = {dfsuther},
  timestamp = {2008.05.12}
}

@INPROCEEDINGS{Qadeer2004,
  author = {Shaz Qadeer and Dinghao Wu},
  title = {KISS: keep it simple and sequential},
  booktitle = {PLDI},
  year = {2004},
  pages = {14--24},
  address = {New York, NY, USA},
  publisher = {ACM},
  owner = {dfsuther},
  timestamp = {2008.04.24}
}

@MISC{Qian2006,
  author = {Qian, F.},
  title = {{SableJBDD}, A {J}ava binary decision diagram package},
  year = {2006},
  owner = {dfsuther},
  timestamp = {2009.07.05},
  url = {http://www.sable.mcgill.ca/~fqian/SableJBDD/}
}

@MISC{CCase,
  author = {IBM Rational},
  title = {ClearCase},
  owner = {dfsuther},
  timestamp = {2008.04.12},
  url = {http://www.ibm.com/software/awdtools/clearcase/}
}

@ARTICLE{Robinson1977,
  author = {Lawrence Robinson and Karl N. Levitt},
  title = {Proof techniques for hierarchically structured programs},
  journal = {Commun. ACM},
  year = {1977},
  volume = {20},
  pages = {271--283},
  number = {4},
  month = {April},
  abstract = {A method for describing and structuring programs that simplifies proofs
	of their correctness is presented. The method formally represents
	a program in terms of levels of abstraction, each level of which
	can be described by a self-contained nonprocedural specification.
	The proofs, like the programs, are structured by levels. Although
	only manual proofs are described in the paper, the method is also
	applicable to semi-automatic and automatic proofs. Preliminary results
	are encouraging, indicating that the method can be applied to large
	programs, such as operating systems.},
  file = {ProofTechStructProg-robinson.pdf:/Users/dfsuther/Documents/School/Thesis/Papers of Others/ProofTechStructProg-robinson.pdf:PDF},
  keywords = {abstraction, and programming methodology, formal specification, hierarchical
	structure, program verification, structured programming},
  owner = {dfsuther},
  timestamp = {2007.10.11}
}

@ARTICLE{Rutar04,
  author = {Rutar, N. and Almazan, C.B. and Foster, J.S.},
  title = {A comparison of bug finding tools for {J}ava},
  journal = {Software Reliability Engineering, 2004. ISSRE 2004. 15th International
	Symposium on},
  year = {2-5 Nov. 2004},
  pages = { 245-256},
  issn = {1071-9458 },
  keywords = { Java, program compilers, program debugging, software tools Bandera,
	ESC, FindBug, JLint, Java, PMD, bug finding tool, source code},
  owner = {dfsuther},
  timestamp = {2008.04.27}
}

@ARTICLE{Shaw1996,
  author = {Mary Shaw},
  title = {Some patterns for software architectures},
  year = {1996},
  pages = {255--269},
  abstract = {Software designers rely on informal patterns, or idioms, to describe
	the architectures
	
	of their software systems—the configurations of components that make
	up
	
	the systems. At the first PLoP, I identified seven patterns that guide
	high-level
	
	system design and discussed the way they guide the composition of
	systems
	
	from particular types of components [Shaw 95]. This paper extends
	the descriptions
	
	of those patterns (plus one) in response to the discussion at the
	conference.
	
	Most significantly, it adds information on the kinds of problems each
	pattern
	
	handles best.},
  address = {Boston, MA, USA},
  book = {Pattern languages of program design 2},
  file = {SomePatternsArch.pdf:/Users/dfsuther/Documents/School/Thesis/Papers of Others/SomePatternsArch.pdf:PDF},
  owner = {dfsuther},
  publisher = {Addison-Wesley Longman Publishing Co., Inc.},
  timestamp = {2008.01.29}
}

@MISC{Shetline2007,
  author = {Kerry Shetline},
  title = {SkyViewCafe},
  year = {2000-2007},
  note = {http://www.skyviewcafe.com/},
  abstract = {Sky View Café is a Java applet that lets you use your web browser
	to see many types of astronomical information, in both graphical
	and numerical form. You can see which stars and planets will be out
	tonight in the sky above your home town, see how the next solar or
	lunar eclipse will look from Los Angeles, or find out when the Moon
	rose over Sydney on your birthday ten years ago. Sky View Café includes
	star charts, a 3-D orrery, displays of the moons of Jupiter and Saturn,
	an astronomical event calendar, an ephemeris generator, and many
	other features.
	
	
	Best of all, Sky View Café is free, and there's nothing you have to
	install to use the on-line web version. All you need is a compatible
	Java-enabled web browser, and you're ready to go.
	
	
	If you're still stuck with dial-up internet service, you'll need to
	be patient — the applet might take a minute or two to load. Future
	visits will typically be much faster if your web browser has kept
	the applet cached.},
  comment = {PROGRAM with source!},
  owner = {dfsuther},
  timestamp = {2008.02.26},
  url = {http://www.skyviewcafe.com/}
}

@INPROCEEDINGS{Srivastava2007,
  author = {Saurabh Srivastava and Michael Hicks and Jeffrey S. Foster},
  title = {Modular information hiding and type-safe linking for {C}},
  booktitle = {TLDI '07: Proceedings of the 2007 ACM SIGPLAN international workshop
	on Types in languages design and implementation},
  year = {2007},
  pages = {3--14},
  publisher = {ACM Press},
  abstract = {This paper presents CMOD, a novel tool that provides a sound module
	system for C. CMOD works by enforcing a set of four rules that are
	based on principles of modular reasoning and on current programming
	practice. CMOD’s rules flesh out the convention that .h header files
	are module interfaces and .c source files are module implementations.
	Although this convention is well-known, developing CMOD’s rules revealed
	there are many subtleties in applying the basic pattern correctly.
	We have proven formally that CMOD’s rules enforce both information
	hiding and type-safe linking. We evaluated CMOD on a number of benchmarks,
	and found that most programs obey CMOD’s rules, or can be made to
	with minimal effort, while rule violations reveal brittle coding
	practices including numerous information hiding violations and occasional
	type errors.},
  file = {Cmod.pdf:/Users/dfsuther/Documents/School/Thesis/Papers of Others/Cmod.pdf:PDF},
  keywords = {C, Information Hiding, Module Systems, Type-Safety},
  owner = {dfsuther},
  timestamp = {2007.10.01}
}

@ARTICLE{Staiger-Stohr:2013:PIA:2450136.2450140,
  author = {Staiger-St\"{o}hr, Stefan},
  title = {Practical Integrated Analysis of Pointers, Dataflow and Control Flow},
  journal = {ACM Trans. Program. Lang. Syst.},
  year = {2013},
  volume = {35},
  pages = {5:1--5:48},
  number = {1},
  month = apr,
  acmid = {2450140},
  address = {New York, NY, USA},
  articleno = {5},
  doi = {10.1145/2450136.2450140},
  issn = {0164-0925},
  issue_date = {April 2013},
  keywords = {Andersen analysis, SSA, flow sensitivity, pointer analysis},
  numpages = {48},
  owner = {dfsuther},
  publisher = {ACM},
  timestamp = {2013.11.20},
  url = {http://doi.acm.org/10.1145/2450136.2450140}
}

@MISC{Electric,
  author = {StaticFreeSoftware},
  title = {Electric},
  owner = {dfsuther},
  timestamp = {2008.08.31},
  url = {http://www.staticfreesoft.com/productsFree.html}
}

@UNPUBLISHED{Sterbenz2007,
  author = {Andreas Sterbenz and Alex Buckley},
  title = {Strawman Proposal for {JSR294} Superpackages},
  note = {Accessed March 2008},
  month = {March},
  year = {2007},
  owner = {dfsuther},
  timestamp = {2008.05.10},
  url = {http://blogs.sun.com/andreas/resource/superpackage_strawman.html}
}

@INPROCEEDINGS{Sterling1993,
  author = {N. Sterling},
  title = {Warlock: A static data race analysis tool},
  booktitle = {USENIX Winter Technical Conference},
  year = {1993},
  pages = {97--106},
  owner = {dfsuther},
  timestamp = {2008.05.12}
}

@ARTICLE{Stevens1974,
  author = {W. P. Stevens and G. J. Myers and L. L. Constantine},
  title = {Structured design},
  journal = {IBM Systems Journal},
  year = {1974},
  volume = {13},
  pages = {115-139},
  number = {2},
  note = {Get this and read it!},
  abstract = {Considerations and techniques are proposed that reduce the complexity
	of programs by dividing them into functional modules. This can make
	it possible to create complex systems from simple, independent, reusable
	modules. Debugging and modifying programs, reconfiguring I/O devices,
	and managing large programming projects can all be greatly simplified.
	And, as the module library grows, increasingly sophisticated programs
	can be implemented using less and less new code.},
  file = {ibmsj1302C.pdf:/Users/dfsuther/Documents/School/Thesis/Papers of Others/ibmsj1302C.pdf:PDF},
  owner = {dfsuther},
  timestamp = {2007.12.24}
}

@MISC{SVN,
  author = {Subversion},
  title = {Subversion},
  owner = {dfsuther},
  timestamp = {2008.04.12},
  url = {http://subversion.tigris.org/}
}

@PHDTHESIS{Sutherland2008,
  author = {Sutherland, Dean F.},
  title = {The {C}ode of {M}any {C}olors: {S}emi-automated {R}easoning about
	{M}ulti-{T}hread {P}olicy for {Java}},
  school = {Carnegie Mellon University},
  year = {2008},
  address = {Pittsburgh, PA 15213},
  month = {May},
  abstract = {Concurrent programming has proven to be difﬁcult. One cause of this
	difﬁculty is that the rel- 
	
	evant thread usage policy seldom appears either in documents or code
	comments. A second dif- 
	
	ﬁculty is that thread usage policy—even when it is known—imposes widespread
	consequences 
	
	on the code to be written. Finally, ﬁnding and removing concurrency
	faults in existing code is 
	
	hard. 
	
	This thesis introduces thread coloring, a language of discourse useful
	for concise expression 
	
	of and reasoning about intended thread usage policies in a wide variety
	of code. Thread coloring 
	
	addresses a range of concurrency issues—assuring single-thread access,
	identifying possibly- 
	
	shared data regions and localizing knowledge about roles for threads—that
	have not previously 
	
	been comprehensively addressed. Using this language, programmers can
	model design intent 
	
	about relationships among the roles of threads with respect to segments
	of executable code and 
	
	also with respect to shared state. Programmers formally link the model
	with their code by ex- 
	
	pressing the model as annotations in that code. 
	
	This thesis describes a prototype analysis tool, integrated into an
	integrated development 
	
	environment, and its use in case studies to demonstrate that thread
	coloring is a feasible and 
	
	practicable approach to expressing and understanding thread usage
	policies, including complex 
	
	ones. The tool analyzes consistency between the expressed model and
	the as-written code, and 
	
	notiﬁes programmers of discrepancies between them. The case studies
	use published code to 
	
	demonstrate that developers can express useful models, identify concurrency
	faults and assure 
	
	policy compliance. The thesis includes a demonstration of scaling
	to a medium-sized program 
	
	of 140KSLOC and a demonstration of the potential to scale to much
	larger programs and sup- 
	
	port composition among analysis results for separately developed components.
	By limiting the 
	
	problem scope to thread usage policy, the prototype implementation
	requires one hundred times 
	
	fewer annotations than are needed for full functional correctness—6.3
	annotations per KSLOC, 
	
	potentially reduceable in future by another order of magnitude. 
	
	This thesis provides ﬁve primary contributions to software engineering.
	First, it provides a 
	
	language that developers can use to express thread usage policies.
	Second, it provides a sys- 
	
	tematic way to improve code quality by assuring that as-written code
	complies with expressed 
	
	thread usage policy. Third, it uses a new combination of preexisting
	techniques to reduce the 
	
	effort required to express models to very low levels. Fourth, it demonstrates
	techniques that per- 
	
	mit the analysis to operate on very large programs—millions of lines
	of code appear to be within 
	
	reach. Finally, it demonstrates techniques that permit straightforward
	and reliable incremental recomputation 
	
	of results after a program change.},
  file = {:Users/dfsuther/Documents/School/Thesis/Thesis.pdf:PDF},
  keywords = {Java, Program evolution, Static analysis, Race Conditions, Multi-threaded
	programming, 
	
	Design Intent, Concurrency, Program assurance},
  owner = {dfsuther},
  timestamp = {2008.08.23}
}

@INPROCEEDINGS{Sutherland2002,
  author = {Dean F. Sutherland and Aaron Greenhouse and William L. Scherlis},
  title = {The code of many colors: relating threads to code and shared state},
  booktitle = {PASTE '02: Proceedings of the 2002 ACM SIGPLAN-SIGSOFT workshop on
	Program analysis for software tools and engineering},
  year = {2002},
  pages = {77--83},
  address = {New York, NY, USA},
  publisher = {ACM},
  owner = {dfsuther},
  timestamp = {2008.04.20}
}

@INPROCEEDINGS{Sutherland2010,
  author = {Sutherland, Dean F. and Scherlis, William L.},
  title = {Composable Thread Coloring},
  booktitle = {PPoPP '10: Proceedings of the 15th ACM SIGPLAN symposium on Principles
	and practice of parallel programming},
  year = {2010},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {This paper introduces the language-independent concept of “thread
	usage policy.” Many multi-threaded software systems con- tain policies
	that regulate associations among threads, executable code, and potentially
	shared state. A system, for example, may constrain which threads
	are permitted to execute particular code segments, usually as a means
	to constrain those threads from accessing or writing particular elements
	of state. These policies ensure properties such as state confinement
	or reader/writer con- straints, often without recourse to locking
	or transaction discipline.
	
	Our approach allows developers to concisely document their thread
	usage policies in a manner that enables the use of sound scal- able
	analysis to assess consistency of policy and as-written code. This
	paper identifies the key semantic concepts of our thread col- oring
	language and illustrates how to use its succinct source-level annotations
	to express models of thread usage policies, following established
	annotation conventions for Java.
	
	We have built a prototype static analysis tool, implemented as an
	integrated development environment plug-in (for the Eclipse IDE),
	that notifies developers of discrepancies between policy an- notations
	and as-written code. Our analysis technique uses several underlying
	algorithms based on abstract interpretation, call-graphs, and type
	inference. The resulting overall analysis is both sound and composable.
	We have used this prototype analysis tool in case stud- ies to model
	and analyze more than a million lines of code.
	
	Our validation process included field trials on a wide variety of
	complex large-scale production code selected by the host organiza-
	tions. Our in-field experience led us to focus on potential adoptabil-
	ity by real-world developers. We have developed techniques that can
	reduce annotation density to less than one line per thousand lines
	of code (KLOC). In addition, the prototype analysis tool sup- ports
	an incremental and iterative approach to modeling and analy- sis.
	This approach enabled field trial partners to directly target areas
	of greatest concern and to achieve useful results within a few hours.},
  location = {Bangalore, India},
  owner = {dfsuther},
  review = {Best paper nominee (one of three), but not the winner.},
  timestamp = {2010.02.09}
}

@INPROCEEDINGS{Wood:2010:CSS:1869459.1869473,
  author = {Wood, Benjamin P. and Sampson, Adrian and Ceze, Luis and Grossman,
	Dan},
  title = {Composable specifications for structured shared-memory communication},
  booktitle = {Proceedings of the ACM international conference on Object oriented
	programming systems languages and applications},
  year = {2010},
  series = {OOPSLA '10},
  pages = {140--159},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1869473},
  doi = {10.1145/1869459.1869473},
  isbn = {978-1-4503-0203-6},
  keywords = {annotation, bug detection, concurrency, shared memory, software reliability,
	specification},
  location = {Reno/Tahoe, Nevada, USA},
  numpages = {20},
  owner = {dfsuther},
  timestamp = {2013.02.15},
  url = {http://doi.acm.org/10.1145/1869459.1869473}
}

@ARTICLE{Xie2005,
  author = {Xie, Yichen and Aiken, Alex},
  title = {Context- and path-sensitive memory leak detection},
  journal = {SIGSOFT Softw. Eng. Notes},
  year = {2005},
  volume = {30},
  pages = {115--125},
  number = {5},
  abstract = {We present a context- and path-sensitive algorithm for detecting memory
	leaks in programs with explicit memory management. Our leak detection
	algorithm is based on an underlying escape analysis: any allocated
	location in a procedure P that is not deallocated in P and does not
	escape from P is leaked. We achieve very precise context- and path-sensitivity
	by expressing our analysis using boolean constraints. In experiments
	with six large open source projects our analysis produced 510 warnings
	of which 455 were unique memory leaks, a false positive rate of only
	10.8%. A parallel implementation improves performance by over an
	order of magnitude on large projects; over five million lines of
	code in the Linux kernel is analyzed in 50 minutes.},
  address = {New York, NY, USA},
  file = {:p115-xie.pdf:PDF},
  issn = {0163-5948},
  owner = {dfsuther},
  publisher = {ACM},
  timestamp = {2009.07.08}
}

@ARTICLE{Yuan:2011:GIT:2052438.2052491,
  author = {Yuan, Xun and Cohen, Myra B. and Memon, Atif M.},
  title = {GUI Interaction Testing: Incorporating Event Context},
  journal = {IEEE Trans. Softw. Eng.},
  year = {2011},
  volume = {37},
  pages = {559--574},
  number = {4},
  month = jul,
  acmid = {2052491},
  address = {Piscataway, NJ, USA},
  doi = {10.1109/TSE.2010.50},
  issn = {0098-5589},
  issue_date = {July 2011},
  keywords = {GUI testing, automated testing, model-based testing, combinatorial
	interaction testing, GUITAR testing system.},
  numpages = {16},
  owner = {dfsuther},
  publisher = {IEEE Press},
  timestamp = {2013.03.01},
  url = {http://dx.doi.org/10.1109/TSE.2010.50}
}

@INPROCEEDINGS{Yuan:2007:UGR:1248820.1248872,
  author = {Yuan, Xun and Memon, Atif M.},
  title = {Using GUI Run-Time State as Feedback to Generate Test Cases},
  booktitle = {Proceedings of the 29th international conference on Software Engineering},
  year = {2007},
  series = {ICSE '07},
  pages = {396--405},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  acmid = {1248872},
  doi = {10.1109/ICSE.2007.94},
  isbn = {0-7695-2828-7},
  numpages = {10},
  owner = {dfsuther},
  timestamp = {2013.03.01},
  url = {http://dx.doi.org/10.1109/ICSE.2007.94}
}

@INPROCEEDINGS{Zhang:2012:FEM:04000800.2336782,
  author = {Zhang, Sai and L\"{u}, Hao and Ernst, Michael D.},
  title = {Finding errors in multithreaded GUI applications},
  booktitle = {Proceedings of the 2012 International Symposium on Software Testing
	and Analysis},
  year = {2012},
  series = {ISSTA 2012},
  pages = {243--253},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {2336782},
  doi = {10.1145/04000800.2336782},
  isbn = {978-1-4503-1454-1},
  location = {Minneapolis, MN, USA},
  numpages = {11},
  owner = {dfsuther},
  timestamp = {2013.02.15},
  url = {http://doi.acm.org/10.1145/04000800.2336782}
}

@INPROCEEDINGS{Zhang:2011:CSD:2001420.2001463,
  author = {Zhang, Sai and Saff, David and Bu, Yingyi and Ernst, Michael D.},
  title = {Combined static and dynamic automated test generation},
  booktitle = {Proceedings of the 2011 International Symposium on Software Testing
	and Analysis},
  year = {2011},
  series = {ISSTA '11},
  pages = {353--363},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {2001463},
  doi = {10.1145/2001420.2001463},
  isbn = {978-1-4503-0562-4},
  keywords = {automated test generation, dynamic analyses, static},
  location = {Toronto, Ontario, Canada},
  numpages = {11},
  owner = {dfsuther},
  timestamp = {2013.03.01},
  url = {http://doi.acm.org/10.1145/2001420.2001463}
}

@MISC{C++SG2,
  title = {{ISO} {C++} {SG2 - Modules}},
  owner = {dfsuther},
  timestamp = {2014.01.24},
  url = {http://isocpp.org/forums}
}

@ELECTRONIC{tutorial:threads-swing,
  title = {Threads and {S}wing},
  howpublished = {\url{http://java.sun.com/docs/\-books/tutorial/\-uiswing/overview/\-threads.html}},
  key = {Java Tutorial},
  owner = {dfsuther},
  timestamp = {2008.04.15}
}

@MISC{bugparade4138730,
  title = {Bug Id 4138730: Provide APIs in AWT for porting multi-threaded GUIs
	to a single-threaded model},
  howpublished = {\url{http://developer.java.sun.com/developer/\-bugParade/index.jshtml}},
  year = {1998},
  key = {Java Developer Connection},
  owner = {dfsuther},
  timestamp = {2008.04.15}
}

@MISC{bugparade4143834,
  title = {Bug Id 4143834: Swing Thread implementation causes notifier to lock},
  howpublished = {\url{http://developer.java.sun.com/developer/bugParade/index.jshtml}},
  year = {1998},
  key = {Java Developer Connection},
  owner = {dfsuther},
  timestamp = {2008.04.15}
}

@MISC{bugparade4172660,
  title = {Bug Id 4172660: tell us when we are executing non-thread-safe Swing
	methods in the wrong thread},
  howpublished = {\url{http://developer.java.sun.com/developer/bugParade/index.jshtml}},
  year = {1998},
  key = {Java Developer Connection},
  owner = {dfsuther},
  timestamp = {2008.04.15}
}

@comment{jabref-meta: selector_publisher:}

@comment{jabref-meta: selector_author:}

@comment{jabref-meta: selector_journal:}

@comment{jabref-meta: selector_keywords:Information Hiding;modules;sep
arate compilation;}

@comment{jabref-meta: selector_title:}

